#!/usr/bin/env node
'use strict';

var path          = require('path');
var program       = require('commander');
var blessed       = require('blessed');
var bootstrap     = require('../build/src/app/bootstrap/builder').default;
var configFile    = path.resolve(process.env.HOME, './.qissues.json');
var cacheFile     = path.resolve(process.env.HOME, './.qissues-cache.json');
var packageInfo   = require('../package.json');

program
  .version(packageInfo.version)
  .option('--clear-cache', 'Clears the cache')
  .option('--init', 'Setup qissues for the first time')
  .option('-v --verbose', 'Verbosity (increase verbosity with more vs)', function(add, level) {
    return level + 1;
  }, 0)
  .parse(process.argv);

// Promise configuration
const Promise = require('bluebird');
global.Promise = Promise;
Promise.config({
  longStackTraces: program.verbose
});

process.title = 'qissues';

var container = bootstrap({
  configFile : configFile,
  cacheFile  : cacheFile,
  logLevel   : program.verbose || 0,
  clearCache : !!program.clearCache,
  input      : process.stdin,
  output     : process.stdout
});

container.getMatching(['app', 'ui'])
  .spread(function(app, ui) {
    app.start(ui);
    app.exit = process.exit;
  });

process.on('unhandledRejection', function(reason, promise) {
  console.error(JSON.stringify(reason, null, 4));
  console.error(promise.toString());
  console.error('Unhandled Rejection: ' + reason.toString() + '\n\n' + reason.stack);
  process.exit(1);
});
